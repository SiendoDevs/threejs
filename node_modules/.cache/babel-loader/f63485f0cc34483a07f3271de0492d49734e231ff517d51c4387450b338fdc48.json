{"ast":null,"code":"import { jsx } from \"react/jsx-runtime\";\nimport { DepthOfFieldEffect, MaskFunction } from \"postprocessing\";\nimport { forwardRef, useContext, useMemo, useEffect } from \"react\";\nimport { Vector3 } from \"three\";\nimport { EffectComposerContext } from \"../EffectComposer.js\";\nconst DepthOfField = forwardRef(function DepthOfField2(_ref, ref) {\n  let {\n    blendFunction,\n    worldFocusDistance,\n    worldFocusRange,\n    focusDistance,\n    focusRange,\n    focalLength,\n    bokehScale,\n    resolutionScale,\n    resolutionX,\n    resolutionY,\n    width,\n    height,\n    target,\n    depthTexture,\n    ...props\n  } = _ref;\n  const {\n    camera\n  } = useContext(EffectComposerContext);\n  const autoFocus = target != null;\n  const effect = useMemo(() => {\n    const effect2 = new DepthOfFieldEffect(camera, {\n      blendFunction,\n      worldFocusDistance,\n      worldFocusRange,\n      focusDistance,\n      focusRange,\n      focalLength,\n      bokehScale,\n      resolutionScale,\n      resolutionX,\n      resolutionY,\n      width,\n      height\n    });\n    if (autoFocus) effect2.target = new Vector3();\n    if (depthTexture) effect2.setDepthTexture(depthTexture.texture, depthTexture.packing);\n    const maskMaterial = effect2.maskPass.getFullscreenMaterial();\n    maskMaterial.maskFunction = MaskFunction.MULTIPLY_RGB_SET_ALPHA;\n    return effect2;\n  }, [camera, blendFunction, worldFocusDistance, worldFocusRange, focusDistance, focusRange, focalLength, bokehScale, resolutionScale, resolutionX, resolutionY, width, height, autoFocus, depthTexture]);\n  useEffect(() => {\n    return () => {\n      effect.dispose();\n    };\n  }, [effect]);\n  return /* @__PURE__ */jsx(\"primitive\", {\n    ...props,\n    ref,\n    object: effect,\n    target\n  });\n});\nexport { DepthOfField };","map":{"version":3,"names":["DepthOfField","forwardRef","DepthOfField2","_ref","ref","blendFunction","worldFocusDistance","worldFocusRange","focusDistance","focusRange","focalLength","bokehScale","resolutionScale","resolutionX","resolutionY","width","height","target","depthTexture","props","camera","useContext","EffectComposerContext","autoFocus","effect","useMemo","effect2","DepthOfFieldEffect","Vector3","setDepthTexture","texture","packing","maskMaterial","maskPass","getFullscreenMaterial","maskFunction","MaskFunction","MULTIPLY_RGB_SET_ALPHA","useEffect","dispose","jsx","object"],"sources":["C:\\Users\\Catriel\\Desktop\\3d-react\\node_modules\\@react-three\\postprocessing\\src\\effects\\DepthOfField.tsx"],"sourcesContent":["import { DepthOfFieldEffect, MaskFunction } from 'postprocessing'\nimport { Ref, forwardRef, useMemo, useEffect, useContext } from 'react'\nimport { ReactThreeFiber } from '@react-three/fiber'\nimport { type DepthPackingStrategies, type Texture, Vector3 } from 'three'\nimport { EffectComposerContext } from '../EffectComposer'\n\ntype DOFProps = ConstructorParameters<typeof DepthOfFieldEffect>[1] &\n  Partial<{\n    target: ReactThreeFiber.Vector3\n    depthTexture: {\n      texture: Texture\n      // TODO: narrow to DepthPackingStrategies\n      packing: number\n    }\n    // TODO: not used\n    blur: number\n  }>\n\nexport const DepthOfField = forwardRef(function DepthOfField(\n  {\n    blendFunction,\n    worldFocusDistance,\n    worldFocusRange,\n    focusDistance,\n    focusRange,\n    focalLength,\n    bokehScale,\n    resolutionScale,\n    resolutionX,\n    resolutionY,\n    width,\n    height,\n    target,\n    depthTexture,\n    ...props\n  }: DOFProps,\n  ref: Ref<DepthOfFieldEffect>\n) {\n  const { camera } = useContext(EffectComposerContext)\n  const autoFocus = target != null\n  const effect = useMemo(() => {\n    const effect = new DepthOfFieldEffect(camera, {\n      blendFunction,\n      worldFocusDistance,\n      worldFocusRange,\n      focusDistance,\n      focusRange,\n      focalLength,\n      bokehScale,\n      resolutionScale,\n      resolutionX,\n      resolutionY,\n      width,\n      height,\n    })\n    // Creating a target enables autofocus, R3F will set via props\n    if (autoFocus) effect.target = new Vector3()\n    // Depth texture for depth picking with optional packing strategy\n    if (depthTexture) effect.setDepthTexture(depthTexture.texture, depthTexture.packing as DepthPackingStrategies)\n    // Temporary fix that restores DOF 6.21.3 behavior, everything since then lets shapes leak through the blur\n    const maskMaterial = (effect as any).maskPass.getFullscreenMaterial()\n    maskMaterial.maskFunction = MaskFunction.MULTIPLY_RGB_SET_ALPHA\n    return effect\n  }, [\n    camera,\n    blendFunction,\n    worldFocusDistance,\n    worldFocusRange,\n    focusDistance,\n    focusRange,\n    focalLength,\n    bokehScale,\n    resolutionScale,\n    resolutionX,\n    resolutionY,\n    width,\n    height,\n    autoFocus,\n    depthTexture,\n  ])\n\n  useEffect(() => {\n    return () => {\n      effect.dispose()\n    }\n  }, [effect])\n\n  return <primitive {...props} ref={ref} object={effect} target={target} />\n})\n"],"mappings":";;;;;AAkBa,MAAAA,YAAA,GAAeC,UAAA,CAAW,SAASC,cAAAC,IAAA,EAkB9CC,GAAA,EACA;EAAA,IAlBA;IACEC,aAAA;IACAC,kBAAA;IACAC,eAAA;IACAC,aAAA;IACAC,UAAA;IACAC,WAAA;IACAC,UAAA;IACAC,eAAA;IACAC,WAAA;IACAC,WAAA;IACAC,KAAA;IACAC,MAAA;IACAC,MAAA;IACAC,YAAA;IACA,GAAGC;EACL,IAAAhB,IAAA;EAGA,MAAM;IAAEiB;EAAA,IAAWC,UAAA,CAAWC,qBAAqB;EACnD,MAAMC,SAAA,GAAYN,MAAA,IAAU;EACtB,MAAAO,MAAA,GAASC,OAAA,CAAQ,MAAM;IACrB,MAAAC,OAAA,GAAS,IAAIC,kBAAA,CAAmBP,MAAA,EAAQ;MAC5Cf,aAAA;MACAC,kBAAA;MACAC,eAAA;MACAC,aAAA;MACAC,UAAA;MACAC,WAAA;MACAC,UAAA;MACAC,eAAA;MACAC,WAAA;MACAC,WAAA;MACAC,KAAA;MACAC;IAAA,CACD;IAEG,IAAAO,SAAA,EAAWG,OAAA,CAAOT,MAAA,GAAS,IAAIW,OAAA;IAE/B,IAAAV,YAAA,EAAcQ,OAAA,CAAOG,eAAA,CAAgBX,YAAA,CAAaY,OAAA,EAASZ,YAAA,CAAaa,OAAiC;IAEvG,MAAAC,YAAA,GAAgBN,OAAA,CAAeO,QAAA,CAASC,qBAAA,CAAsB;IACpEF,YAAA,CAAaG,YAAA,GAAeC,YAAA,CAAaC,sBAAA;IAClC,OAAAX,OAAA;EAAA,GACN,CACDN,MAAA,EACAf,aAAA,EACAC,kBAAA,EACAC,eAAA,EACAC,aAAA,EACAC,UAAA,EACAC,WAAA,EACAC,UAAA,EACAC,eAAA,EACAC,WAAA,EACAC,WAAA,EACAC,KAAA,EACAC,MAAA,EACAO,SAAA,EACAL,YAAA,CACD;EAEDoB,SAAA,CAAU,MAAM;IACd,OAAO,MAAM;MACXd,MAAA,CAAOe,OAAA,CAAQ;IAAA;EACjB,GACC,CAACf,MAAM,CAAC;EAEX,sBAAAgB,GAAA,CAAQ,aAAW;IAAA,GAAGrB,KAAA;IAAOf,GAAA;IAAUqC,MAAA,EAAQjB,MAAA;IAAQP;EAAgB;AACzE,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}