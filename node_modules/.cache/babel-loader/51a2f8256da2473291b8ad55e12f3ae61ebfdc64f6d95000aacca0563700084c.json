{"ast":null,"code":"import React,{useEffect}from\"react\";import{useFrame,useLoader}from\"@react-three/fiber\";import{MeshReflectorMaterial}from\"@react-three/drei\";import{LinearEncoding,RepeatWrapping,TextureLoader}from\"three\";import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";export function Ground(){// thanks to https://polyhaven.com/a/rough_plasterbrick_05 !\nconst[roughness,normal]=useLoader(TextureLoader,[process.env.PUBLIC_URL+\"textures/terrain-roughness.jpg\",process.env.PUBLIC_URL+\"textures/terrain-normal.jpg\"]);useEffect(()=>{[normal,roughness].forEach(t=>{t.wrapS=RepeatWrapping;t.wrapT=RepeatWrapping;t.repeat.set(5,5);t.offset.set(0,0);});normal.encoding=LinearEncoding;},[normal,roughness]);useFrame((state,delta)=>{let t=-state.clock.getElapsedTime()*0.128;roughness.offset.set(0,t%1);normal.offset.set(0,t%1);});return/*#__PURE__*/_jsxs(\"mesh\",{\"rotation-x\":-Math.PI*0.5,castShadow:true,receiveShadow:true,children:[/*#__PURE__*/_jsx(\"planeGeometry\",{args:[30,30]}),/*#__PURE__*/_jsx(MeshReflectorMaterial,{envMapIntensity:0,normalMap:normal,normalScale:[0.15,0.15],roughnessMap:roughness,dithering:true,color:[0.015,0.015,0.015],roughness:0.7,blur:[1000,400]// Blur ground reflections (width, heigt), 0 skips blur\n,mixBlur:30// How much blur mixes with surface roughness (default = 1)\n,mixStrength:80// Strength of the reflections\n,mixContrast:1// Contrast of the reflections\n,resolution:1024// Off-buffer resolution, lower=faster, higher=better quality, slower\n,mirror:0// Mirror environment, 0 = texture colors, 1 = pick up env colors\n,depthScale:0.01// Scale the depth factor (0 = no depth, default = 0)\n,minDepthThreshold:0.9// Lower edge for the depthTexture interpolation (default = 0)\n,maxDepthThreshold:1// Upper edge for the depthTexture interpolation (default = 0)\n,depthToBlurRatioBias:0.25// Adds a bias factor to the depthTexture before calculating the blur amount [blurFactor = blurTexture * (depthTexture + bias)]. It accepts values between 0 and 1, default is 0.25. An amount > 0 of bias makes sure that the blurTexture is not too sharp because of the multiplication with the depthTexture\n,debug:0,reflectorOffset:0.2// Offsets the virtual camera that projects the reflection. Useful when the reflective surface is some distance from the object's origin (default = 0)\n})]});}","map":{"version":3,"names":["React","useEffect","useFrame","useLoader","MeshReflectorMaterial","LinearEncoding","RepeatWrapping","TextureLoader","jsx","_jsx","jsxs","_jsxs","Ground","roughness","normal","process","env","PUBLIC_URL","forEach","t","wrapS","wrapT","repeat","set","offset","encoding","state","delta","clock","getElapsedTime","Math","PI","castShadow","receiveShadow","children","args","envMapIntensity","normalMap","normalScale","roughnessMap","dithering","color","blur","mixBlur","mixStrength","mixContrast","resolution","mirror","depthScale","minDepthThreshold","maxDepthThreshold","depthToBlurRatioBias","debug","reflectorOffset"],"sources":["C:/Users/Catriel/Desktop/3d-react/src/Ground.js"],"sourcesContent":["import React, { useEffect } from \"react\";\r\nimport { useFrame, useLoader } from \"@react-three/fiber\";\r\nimport { MeshReflectorMaterial } from \"@react-three/drei\";\r\nimport { LinearEncoding, RepeatWrapping, TextureLoader } from \"three\";\r\n\r\nexport function Ground() {\r\n  // thanks to https://polyhaven.com/a/rough_plasterbrick_05 !\r\n  const [roughness, normal] = useLoader(TextureLoader, [\r\n    process.env.PUBLIC_URL + \"textures/terrain-roughness.jpg\",\r\n    process.env.PUBLIC_URL + \"textures/terrain-normal.jpg\",\r\n  ]);\r\n\r\n  useEffect(() => {\r\n    [normal, roughness].forEach((t) => {\r\n      t.wrapS = RepeatWrapping;\r\n      t.wrapT = RepeatWrapping;\r\n      t.repeat.set(5, 5);\r\n      t.offset.set(0, 0);\r\n    });\r\n\r\n    normal.encoding = LinearEncoding;\r\n  }, [normal, roughness]);\r\n\r\n  useFrame((state, delta) => {\r\n    let t = -state.clock.getElapsedTime() * 0.128;\r\n    roughness.offset.set(0, t % 1);\r\n    normal.offset.set(0, t % 1);\r\n  });\r\n\r\n  return (\r\n    <mesh rotation-x={-Math.PI * 0.5} castShadow receiveShadow>\r\n      <planeGeometry args={[30, 30]} />\r\n      <MeshReflectorMaterial\r\n        envMapIntensity={0}\r\n        normalMap={normal}\r\n        normalScale={[0.15, 0.15]}\r\n        roughnessMap={roughness}\r\n        dithering={true}\r\n        color={[0.015, 0.015, 0.015]}\r\n        roughness={0.7}\r\n        blur={[1000, 400]} // Blur ground reflections (width, heigt), 0 skips blur\r\n        mixBlur={30} // How much blur mixes with surface roughness (default = 1)\r\n        mixStrength={80} // Strength of the reflections\r\n        mixContrast={1} // Contrast of the reflections\r\n        resolution={1024} // Off-buffer resolution, lower=faster, higher=better quality, slower\r\n        mirror={0} // Mirror environment, 0 = texture colors, 1 = pick up env colors\r\n        depthScale={0.01} // Scale the depth factor (0 = no depth, default = 0)\r\n        minDepthThreshold={0.9} // Lower edge for the depthTexture interpolation (default = 0)\r\n        maxDepthThreshold={1} // Upper edge for the depthTexture interpolation (default = 0)\r\n        depthToBlurRatioBias={0.25} // Adds a bias factor to the depthTexture before calculating the blur amount [blurFactor = blurTexture * (depthTexture + bias)]. It accepts values between 0 and 1, default is 0.25. An amount > 0 of bias makes sure that the blurTexture is not too sharp because of the multiplication with the depthTexture\r\n        debug={0}\r\n        reflectorOffset={0.2} // Offsets the virtual camera that projects the reflection. Useful when the reflective surface is some distance from the object's origin (default = 0)\r\n      />\r\n    </mesh>\r\n  );\r\n}"],"mappings":"AAAA,MAAO,CAAAA,KAAK,EAAIC,SAAS,KAAQ,OAAO,CACxC,OAASC,QAAQ,CAAEC,SAAS,KAAQ,oBAAoB,CACxD,OAASC,qBAAqB,KAAQ,mBAAmB,CACzD,OAASC,cAAc,CAAEC,cAAc,CAAEC,aAAa,KAAQ,OAAO,CAAC,OAAAC,GAAA,IAAAC,IAAA,gCAAAC,IAAA,IAAAC,KAAA,yBAEtE,MAAO,SAAS,CAAAC,MAAMA,CAAA,CAAG,CACvB;AACA,KAAM,CAACC,SAAS,CAAEC,MAAM,CAAC,CAAGX,SAAS,CAACI,aAAa,CAAE,CACnDQ,OAAO,CAACC,GAAG,CAACC,UAAU,CAAG,gCAAgC,CACzDF,OAAO,CAACC,GAAG,CAACC,UAAU,CAAG,6BAA6B,CACvD,CAAC,CAEFhB,SAAS,CAAC,IAAM,CACd,CAACa,MAAM,CAAED,SAAS,CAAC,CAACK,OAAO,CAAEC,CAAC,EAAK,CACjCA,CAAC,CAACC,KAAK,CAAGd,cAAc,CACxBa,CAAC,CAACE,KAAK,CAAGf,cAAc,CACxBa,CAAC,CAACG,MAAM,CAACC,GAAG,CAAC,CAAC,CAAE,CAAC,CAAC,CAClBJ,CAAC,CAACK,MAAM,CAACD,GAAG,CAAC,CAAC,CAAE,CAAC,CAAC,CACpB,CAAC,CAAC,CAEFT,MAAM,CAACW,QAAQ,CAAGpB,cAAc,CAClC,CAAC,CAAE,CAACS,MAAM,CAAED,SAAS,CAAC,CAAC,CAEvBX,QAAQ,CAAC,CAACwB,KAAK,CAAEC,KAAK,GAAK,CACzB,GAAI,CAAAR,CAAC,CAAG,CAACO,KAAK,CAACE,KAAK,CAACC,cAAc,CAAC,CAAC,CAAG,KAAK,CAC7ChB,SAAS,CAACW,MAAM,CAACD,GAAG,CAAC,CAAC,CAAEJ,CAAC,CAAG,CAAC,CAAC,CAC9BL,MAAM,CAACU,MAAM,CAACD,GAAG,CAAC,CAAC,CAAEJ,CAAC,CAAG,CAAC,CAAC,CAC7B,CAAC,CAAC,CAEF,mBACER,KAAA,SAAM,aAAY,CAACmB,IAAI,CAACC,EAAE,CAAG,GAAI,CAACC,UAAU,MAACC,aAAa,MAAAC,QAAA,eACxDzB,IAAA,kBAAe0B,IAAI,CAAE,CAAC,EAAE,CAAE,EAAE,CAAE,CAAE,CAAC,cACjC1B,IAAA,CAACL,qBAAqB,EACpBgC,eAAe,CAAE,CAAE,CACnBC,SAAS,CAAEvB,MAAO,CAClBwB,WAAW,CAAE,CAAC,IAAI,CAAE,IAAI,CAAE,CAC1BC,YAAY,CAAE1B,SAAU,CACxB2B,SAAS,CAAE,IAAK,CAChBC,KAAK,CAAE,CAAC,KAAK,CAAE,KAAK,CAAE,KAAK,CAAE,CAC7B5B,SAAS,CAAE,GAAI,CACf6B,IAAI,CAAE,CAAC,IAAI,CAAE,GAAG,CAAG;AAAA,CACnBC,OAAO,CAAE,EAAI;AAAA,CACbC,WAAW,CAAE,EAAI;AAAA,CACjBC,WAAW,CAAE,CAAG;AAAA,CAChBC,UAAU,CAAE,IAAM;AAAA,CAClBC,MAAM,CAAE,CAAG;AAAA,CACXC,UAAU,CAAE,IAAM;AAAA,CAClBC,iBAAiB,CAAE,GAAK;AAAA,CACxBC,iBAAiB,CAAE,CAAG;AAAA,CACtBC,oBAAoB,CAAE,IAAM;AAAA,CAC5BC,KAAK,CAAE,CAAE,CACTC,eAAe,CAAE,GAAK;AAAA,CACvB,CAAC,EACE,CAAC,CAEX"},"metadata":{},"sourceType":"module","externalDependencies":[]}