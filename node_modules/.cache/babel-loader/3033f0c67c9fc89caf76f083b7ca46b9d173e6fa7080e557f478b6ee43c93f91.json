{"ast":null,"code":"import { jsx } from \"react/jsx-runtime\";\nimport { ColorAverageEffect, BlendFunction } from \"postprocessing\";\nimport { forwardRef, useMemo } from \"react\";\nconst ColorAverage = forwardRef(function ColorAverage2(_ref, ref) {\n  let {\n    blendFunction = BlendFunction.NORMAL\n  } = _ref;\n  const effect = useMemo(() => new ColorAverageEffect(blendFunction), [blendFunction]);\n  return /* @__PURE__ */jsx(\"primitive\", {\n    ref,\n    object: effect,\n    dispose: null\n  });\n});\nexport { ColorAverage };","map":{"version":3,"names":["ColorAverage","forwardRef","ColorAverage2","_ref","ref","blendFunction","BlendFunction","NORMAL","effect","useMemo","ColorAverageEffect","jsx","object","dispose"],"sources":["C:\\Users\\Catriel\\Desktop\\3d-react\\node_modules\\@react-three\\postprocessing\\src\\effects\\ColorAverage.tsx"],"sourcesContent":["import { ColorAverageEffect, BlendFunction } from 'postprocessing'\nimport React, { Ref, forwardRef, useMemo } from 'react'\n\nexport type ColorAverageProps = Partial<{\n  blendFunction: BlendFunction\n}>\n\nexport const ColorAverage = forwardRef<ColorAverageEffect, ColorAverageProps>(function ColorAverage(\n  { blendFunction = BlendFunction.NORMAL }: ColorAverageProps,\n  ref: Ref<ColorAverageEffect>\n) {\n  /** Because ColorAverage blendFunction is not an object but a number, we have to define a custom prop \"blendFunction\" */\n  const effect = useMemo(() => new ColorAverageEffect(blendFunction), [blendFunction])\n  return <primitive ref={ref} object={effect} dispose={null} />\n})\n"],"mappings":";;;AAOa,MAAAA,YAAA,GAAeC,UAAA,CAAkD,SAASC,cAAAC,IAAA,EAErFC,GAAA,EACA;EAAA,IAFA;IAAEC,aAAA,GAAgBC,aAAA,CAAcC;EAAO,IAAAJ,IAAA;EAIjC,MAAAK,MAAA,GAASC,OAAA,CAAQ,MAAM,IAAIC,kBAAA,CAAmBL,aAAa,GAAG,CAACA,aAAa,CAAC;EACnF,sBAAAM,GAAA,CAAQ,aAAU;IAAAP,GAAA;IAAUQ,MAAA,EAAQJ,MAAA;IAAQK,OAAA,EAAS;EAAM;AAC7D,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}