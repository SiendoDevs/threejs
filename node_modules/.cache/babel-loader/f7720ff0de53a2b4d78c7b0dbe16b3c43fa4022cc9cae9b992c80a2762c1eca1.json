{"ast":null,"code":"import { jsx } from \"react/jsx-runtime\";\nimport { useThree } from \"@react-three/fiber\";\nimport { LUT3DEffect } from \"postprocessing\";\nimport { forwardRef, useMemo, useLayoutEffect } from \"react\";\nconst LUT = forwardRef(function LUT2(_ref, ref) {\n  let {\n    lut,\n    tetrahedralInterpolation,\n    ...props\n  } = _ref;\n  const effect = useMemo(() => new LUT3DEffect(lut, props), [lut, props]);\n  const invalidate = useThree(state => state.invalidate);\n  useLayoutEffect(() => {\n    if (tetrahedralInterpolation) effect.tetrahedralInterpolation = tetrahedralInterpolation;\n    if (lut) effect.lut = lut;\n    invalidate();\n  }, [effect, invalidate, lut, tetrahedralInterpolation]);\n  return /* @__PURE__ */jsx(\"primitive\", {\n    ref,\n    object: effect,\n    dispose: null\n  });\n});\nexport { LUT };","map":{"version":3,"names":["LUT","forwardRef","LUT2","_ref","ref","lut","tetrahedralInterpolation","props","effect","useMemo","LUT3DEffect","invalidate","useThree","state","useLayoutEffect","jsx","object","dispose"],"sources":["C:\\Users\\Catriel\\Desktop\\3d-react\\node_modules\\@react-three\\postprocessing\\src\\effects\\LUT.tsx"],"sourcesContent":["import { useThree } from '@react-three/fiber'\nimport { LUT3DEffect, BlendFunction } from 'postprocessing'\nimport React, { forwardRef, Ref, useLayoutEffect, useMemo } from 'react'\nimport type { Texture } from 'three'\n\nexport type LUTProps = {\n  lut: Texture\n  blendFunction?: BlendFunction\n  tetrahedralInterpolation?: boolean\n}\n\nexport const LUT = forwardRef(function LUT(\n  { lut, tetrahedralInterpolation, ...props }: LUTProps,\n  ref: Ref<LUT3DEffect>\n) {\n  const effect = useMemo(() => new LUT3DEffect(lut, props), [lut, props])\n  const invalidate = useThree((state) => state.invalidate)\n\n  useLayoutEffect(() => {\n    if (tetrahedralInterpolation) effect.tetrahedralInterpolation = tetrahedralInterpolation\n    if (lut) effect.lut = lut\n    invalidate()\n  }, [effect, invalidate, lut, tetrahedralInterpolation])\n\n  return <primitive ref={ref} object={effect} dispose={null} />\n})\n"],"mappings":";;;;AAWa,MAAAA,GAAA,GAAMC,UAAA,CAAW,SAASC,KAAAC,IAAA,EAErCC,GAAA,EACA;EAAA,IAFA;IAAEC,GAAA;IAAKC,wBAAA;IAA0B,GAAGC;EAAM,IAAAJ,IAAA;EAGpC,MAAAK,MAAA,GAASC,OAAA,CAAQ,MAAM,IAAIC,WAAA,CAAYL,GAAA,EAAKE,KAAK,GAAG,CAACF,GAAA,EAAKE,KAAK,CAAC;EACtE,MAAMI,UAAA,GAAaC,QAAA,CAAUC,KAAA,IAAUA,KAAA,CAAMF,UAAU;EAEvDG,eAAA,CAAgB,MAAM;IAChB,IAAAR,wBAAA,EAA0BE,MAAA,CAAOF,wBAAA,GAA2BA,wBAAA;IAC5D,IAAAD,GAAA,EAAKG,MAAA,CAAOH,GAAA,GAAMA,GAAA;IACXM,UAAA;KACV,CAACH,MAAA,EAAQG,UAAA,EAAYN,GAAA,EAAKC,wBAAwB,CAAC;EAEtD,sBAAAS,GAAA,CAAQ,aAAU;IAAAX,GAAA;IAAUY,MAAA,EAAQR,MAAA;IAAQS,OAAA,EAAS;EAAM;AAC7D,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}