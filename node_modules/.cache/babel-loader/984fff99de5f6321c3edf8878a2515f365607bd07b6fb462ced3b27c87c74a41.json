{"ast":null,"code":"import { jsx } from \"react/jsx-runtime\";\nimport { SelectiveBloomEffect, BlendFunction } from \"postprocessing\";\nimport { forwardRef, useContext, useMemo, useEffect } from \"react\";\nimport { useThree } from \"@react-three/fiber\";\nimport { EffectComposerContext } from \"../EffectComposer.js\";\nimport { selectionContext } from \"../Selection.js\";\nimport { resolveRef } from \"../util.js\";\nconst addLight = (light, effect) => light.layers.enable(effect.selection.layer);\nconst removeLight = (light, effect) => light.layers.disable(effect.selection.layer);\nconst SelectiveBloom = forwardRef(function SelectiveBloom2(_ref, forwardRef2) {\n  let {\n    selection = [],\n    selectionLayer = 10,\n    lights = [],\n    luminanceThreshold,\n    luminanceSmoothing,\n    intensity,\n    width,\n    height,\n    kernelSize,\n    mipmapBlur,\n    ...props\n  } = _ref;\n  if (lights.length === 0) {\n    console.warn(\"SelectiveBloom requires lights to work.\");\n  }\n  const invalidate = useThree(state => state.invalidate);\n  const {\n    scene,\n    camera\n  } = useContext(EffectComposerContext);\n  const effect = useMemo(() => new SelectiveBloomEffect(scene, camera, {\n    blendFunction: BlendFunction.ADD,\n    luminanceThreshold,\n    luminanceSmoothing,\n    intensity,\n    width,\n    height,\n    kernelSize,\n    mipmapBlur,\n    ...props\n  }), [scene, camera, luminanceThreshold, luminanceSmoothing, intensity, width, height, kernelSize, mipmapBlur, props]);\n  const api = useContext(selectionContext);\n  useEffect(() => {\n    if (!api && selection) {\n      effect.selection.set(Array.isArray(selection) ? selection.map(resolveRef) : [resolveRef(selection)]);\n      invalidate();\n      return () => {\n        effect.selection.clear();\n        invalidate();\n      };\n    }\n  }, [effect, selection, api, invalidate]);\n  useEffect(() => {\n    effect.selection.layer = selectionLayer;\n    invalidate();\n  }, [effect, invalidate, selectionLayer]);\n  useEffect(() => {\n    if (lights && lights.length > 0) {\n      lights.forEach(light => addLight(resolveRef(light), effect));\n      invalidate();\n      return () => {\n        lights.forEach(light => removeLight(resolveRef(light), effect));\n        invalidate();\n      };\n    }\n  }, [effect, invalidate, lights, selectionLayer]);\n  useEffect(() => {\n    var _a;\n    if (api && api.enabled) {\n      if ((_a = api.selected) == null ? void 0 : _a.length) {\n        effect.selection.set(api.selected);\n        invalidate();\n        return () => {\n          effect.selection.clear();\n          invalidate();\n        };\n      }\n    }\n  }, [api, effect.selection, invalidate]);\n  return /* @__PURE__ */jsx(\"primitive\", {\n    ref: forwardRef2,\n    object: effect,\n    dispose: null\n  });\n});\nexport { SelectiveBloom };","map":{"version":3,"names":["addLight","light","effect","layers","enable","selection","layer","removeLight","disable","SelectiveBloom","forwardRef","SelectiveBloom2","_ref","forwardRef2","selectionLayer","lights","luminanceThreshold","luminanceSmoothing","intensity","width","height","kernelSize","mipmapBlur","props","length","console","warn","invalidate","useThree","state","scene","camera","useContext","EffectComposerContext","useMemo","SelectiveBloomEffect","blendFunction","BlendFunction","ADD","api","selectionContext","useEffect","set","Array","isArray","map","resolveRef","clear","forEach","enabled","_a","selected","jsx","ref","object","dispose"],"sources":["C:\\Users\\Catriel\\Desktop\\3d-react\\node_modules\\@react-three\\postprocessing\\src\\effects\\SelectiveBloom.tsx"],"sourcesContent":["import { SelectiveBloomEffect, BlendFunction } from 'postprocessing'\nimport type { BloomEffectOptions } from 'postprocessing'\nimport React, { Ref, MutableRefObject, forwardRef, useMemo, useEffect, useContext, useRef } from 'react'\nimport { Object3D } from 'three'\nimport { useThree } from '@react-three/fiber'\nimport { EffectComposerContext } from '../EffectComposer'\nimport { selectionContext } from '../Selection'\nimport { resolveRef } from '../util'\n\ntype ObjectRef = MutableRefObject<Object3D>\n\nexport type SelectiveBloomProps = BloomEffectOptions &\n  Partial<{\n    lights: Object3D[] | ObjectRef[]\n    selection: Object3D | Object3D[] | ObjectRef | ObjectRef[]\n    selectionLayer: number\n  }>\n\nconst addLight = (light: Object3D, effect: SelectiveBloomEffect) => light.layers.enable(effect.selection.layer)\nconst removeLight = (light: Object3D, effect: SelectiveBloomEffect) => light.layers.disable(effect.selection.layer)\n\nexport const SelectiveBloom = forwardRef(function SelectiveBloom(\n  {\n    selection = [],\n    selectionLayer = 10,\n    lights = [],\n    luminanceThreshold,\n    luminanceSmoothing,\n    intensity,\n    width,\n    height,\n    kernelSize,\n    mipmapBlur,\n\n    ...props\n  }: SelectiveBloomProps,\n  forwardRef: Ref<SelectiveBloomEffect>\n) {\n  if (lights.length === 0) {\n    console.warn('SelectiveBloom requires lights to work.')\n  }\n\n  const invalidate = useThree((state) => state.invalidate)\n  const { scene, camera } = useContext(EffectComposerContext)\n  const effect = useMemo(\n    () =>\n      new SelectiveBloomEffect(scene, camera, {\n        blendFunction: BlendFunction.ADD,\n        luminanceThreshold,\n        luminanceSmoothing,\n        intensity,\n        width,\n        height,\n        kernelSize,\n        mipmapBlur,\n        ...props,\n      }),\n    [scene, camera, luminanceThreshold, luminanceSmoothing, intensity, width, height, kernelSize, mipmapBlur, props]\n  )\n\n  const api = useContext(selectionContext)\n\n  useEffect(() => {\n    // Do not allow array selection if declarative selection is active\n    // TODO: array selection should probably be deprecated altogether\n    if (!api && selection) {\n      effect.selection.set(\n        Array.isArray(selection) ? (selection as Object3D[]).map(resolveRef) : [resolveRef(selection) as Object3D]\n      )\n      invalidate()\n      return () => {\n        effect.selection.clear()\n        invalidate()\n      }\n    }\n  }, [effect, selection, api, invalidate])\n\n  useEffect(() => {\n    effect.selection.layer = selectionLayer\n    invalidate()\n  }, [effect, invalidate, selectionLayer])\n\n  useEffect(() => {\n    if (lights && lights.length > 0) {\n      lights.forEach((light) => addLight(resolveRef(light), effect))\n      invalidate()\n      return () => {\n        lights.forEach((light) => removeLight(resolveRef(light), effect))\n        invalidate()\n      }\n    }\n  }, [effect, invalidate, lights, selectionLayer])\n\n  useEffect(() => {\n    if (api && api.enabled) {\n      if (api.selected?.length) {\n        effect.selection.set(api.selected)\n        invalidate()\n        return () => {\n          effect.selection.clear()\n          invalidate()\n        }\n      }\n    }\n  }, [api, effect.selection, invalidate])\n\n  return <primitive ref={forwardRef} object={effect} dispose={null} />\n})\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}