{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Catriel\\\\Desktop\\\\3d-react\\\\src\\\\Ground.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect } from \"react\";\nimport { useFrame, useLoader } from \"@react-three/fiber\";\nimport { MeshReflectorMaterial } from \"@react-three/drei\";\nimport { LinearEncoding, RepeatWrapping, TextureLoader } from \"three\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport function Ground() {\n  _s();\n  // thanks to https://polyhaven.com/a/rough_plasterbrick_05 !\n  const [roughness, normal] = useLoader(TextureLoader, [process.env.PUBLIC_URL + \"textures/terrain-roughness.jpg\", process.env.PUBLIC_URL + \"textures/terrain-normal.jpg\"]);\n  useEffect(() => {\n    [normal, roughness].forEach(t => {\n      t.wrapS = RepeatWrapping;\n      t.wrapT = RepeatWrapping;\n      t.repeat.set(5, 5);\n      t.offset.set(0, 0);\n    });\n    normal.encoding = LinearEncoding;\n  }, [normal, roughness]);\n  useFrame((state, delta) => {\n    let t = -state.clock.getElapsedTime() * 0.128;\n    roughness.offset.set(0, t % 1);\n    normal.offset.set(0, t % 1);\n  });\n  return /*#__PURE__*/_jsxDEV(\"mesh\", {\n    \"rotation-x\": -Math.PI * 0.5,\n    castShadow: true,\n    receiveShadow: true,\n    children: [/*#__PURE__*/_jsxDEV(\"planeGeometry\", {\n      args: [30, 30]\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(MeshReflectorMaterial, {\n      envMapIntensity: 0,\n      normalMap: normal,\n      normalScale: [0.15, 0.15],\n      roughnessMap: roughness,\n      dithering: true,\n      color: [0.015, 0.015, 0.015],\n      roughness: 0.7,\n      blur: [1000, 400] // Blur ground reflections (width, heigt), 0 skips blur\n      ,\n      mixBlur: 30 // How much blur mixes with surface roughness (default = 1)\n      ,\n      mixStrength: 80 // Strength of the reflections\n      ,\n      mixContrast: 1 // Contrast of the reflections\n      ,\n      resolution: 1024 // Off-buffer resolution, lower=faster, higher=better quality, slower\n      ,\n      mirror: 0 // Mirror environment, 0 = texture colors, 1 = pick up env colors\n      ,\n      depthScale: 0.01 // Scale the depth factor (0 = no depth, default = 0)\n      ,\n      minDepthThreshold: 0.9 // Lower edge for the depthTexture interpolation (default = 0)\n      ,\n      maxDepthThreshold: 1 // Upper edge for the depthTexture interpolation (default = 0)\n      ,\n      depthToBlurRatioBias: 0.25 // Adds a bias factor to the depthTexture before calculating the blur amount [blurFactor = blurTexture * (depthTexture + bias)]. It accepts values between 0 and 1, default is 0.25. An amount > 0 of bias makes sure that the blurTexture is not too sharp because of the multiplication with the depthTexture\n      ,\n      debug: 0,\n      reflectorOffset: 0.2 // Offsets the virtual camera that projects the reflection. Useful when the reflective surface is some distance from the object's origin (default = 0)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 31,\n    columnNumber: 5\n  }, this);\n}\n_s(Ground, \"wcDk7cgWna99XxDlz0fmHvlI7F8=\", false, function () {\n  return [useLoader, useFrame];\n});\n_c = Ground;\nvar _c;\n$RefreshReg$(_c, \"Ground\");","map":{"version":3,"names":["React","useEffect","useFrame","useLoader","MeshReflectorMaterial","LinearEncoding","RepeatWrapping","TextureLoader","jsxDEV","_jsxDEV","Ground","_s","roughness","normal","process","env","PUBLIC_URL","forEach","t","wrapS","wrapT","repeat","set","offset","encoding","state","delta","clock","getElapsedTime","Math","PI","castShadow","receiveShadow","children","args","fileName","_jsxFileName","lineNumber","columnNumber","envMapIntensity","normalMap","normalScale","roughnessMap","dithering","color","blur","mixBlur","mixStrength","mixContrast","resolution","mirror","depthScale","minDepthThreshold","maxDepthThreshold","depthToBlurRatioBias","debug","reflectorOffset","_c","$RefreshReg$"],"sources":["C:/Users/Catriel/Desktop/3d-react/src/Ground.js"],"sourcesContent":["import React, { useEffect } from \"react\";\r\nimport { useFrame, useLoader } from \"@react-three/fiber\";\r\nimport { MeshReflectorMaterial } from \"@react-three/drei\";\r\nimport { LinearEncoding, RepeatWrapping, TextureLoader } from \"three\";\r\n\r\nexport function Ground() {\r\n  // thanks to https://polyhaven.com/a/rough_plasterbrick_05 !\r\n  const [roughness, normal] = useLoader(TextureLoader, [\r\n    process.env.PUBLIC_URL + \"textures/terrain-roughness.jpg\",\r\n    process.env.PUBLIC_URL + \"textures/terrain-normal.jpg\",\r\n  ]);\r\n\r\n  useEffect(() => {\r\n    [normal, roughness].forEach((t) => {\r\n      t.wrapS = RepeatWrapping;\r\n      t.wrapT = RepeatWrapping;\r\n      t.repeat.set(5, 5);\r\n      t.offset.set(0, 0);\r\n    });\r\n\r\n    normal.encoding = LinearEncoding;\r\n  }, [normal, roughness]);\r\n\r\n  useFrame((state, delta) => {\r\n    let t = -state.clock.getElapsedTime() * 0.128;\r\n    roughness.offset.set(0, t % 1);\r\n    normal.offset.set(0, t % 1);\r\n  });\r\n\r\n  return (\r\n    <mesh rotation-x={-Math.PI * 0.5} castShadow receiveShadow>\r\n      <planeGeometry args={[30, 30]} />\r\n      <MeshReflectorMaterial\r\n        envMapIntensity={0}\r\n        normalMap={normal}\r\n        normalScale={[0.15, 0.15]}\r\n        roughnessMap={roughness}\r\n        dithering={true}\r\n        color={[0.015, 0.015, 0.015]}\r\n        roughness={0.7}\r\n        blur={[1000, 400]} // Blur ground reflections (width, heigt), 0 skips blur\r\n        mixBlur={30} // How much blur mixes with surface roughness (default = 1)\r\n        mixStrength={80} // Strength of the reflections\r\n        mixContrast={1} // Contrast of the reflections\r\n        resolution={1024} // Off-buffer resolution, lower=faster, higher=better quality, slower\r\n        mirror={0} // Mirror environment, 0 = texture colors, 1 = pick up env colors\r\n        depthScale={0.01} // Scale the depth factor (0 = no depth, default = 0)\r\n        minDepthThreshold={0.9} // Lower edge for the depthTexture interpolation (default = 0)\r\n        maxDepthThreshold={1} // Upper edge for the depthTexture interpolation (default = 0)\r\n        depthToBlurRatioBias={0.25} // Adds a bias factor to the depthTexture before calculating the blur amount [blurFactor = blurTexture * (depthTexture + bias)]. It accepts values between 0 and 1, default is 0.25. An amount > 0 of bias makes sure that the blurTexture is not too sharp because of the multiplication with the depthTexture\r\n        debug={0}\r\n        reflectorOffset={0.2} // Offsets the virtual camera that projects the reflection. Useful when the reflective surface is some distance from the object's origin (default = 0)\r\n      />\r\n    </mesh>\r\n  );\r\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}